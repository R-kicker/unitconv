str(uc(uc(u(list(1, 2), "ton"), "ton", "lb"), "lb", "ton"))
uc(u(list(1, 2), "ton"), "ton", "lb")
debug(uc)
uc(u(list(1, 2), "ton"), "ton", "lb")
lf
phys
str(x)
x*m
sapply(x, `*`, m)
lapply(x, `*`, m)
z <- lapply(x, `*`, m)
z
str(z)
z
zz <- uc(u(list(1, 2), "ton"), "ton", "lb")
class(x)
str(x)
ss <- str(x)
?str
ls.str(x)
names(x)
attr(x)
attributes(x)
u(list(1, 2), "kg")
attr(u(list(1, 2), "kg"))
attributes(u(list(1, 2), "kg"))
attributes(list(1, 2))
class(list(1, 2))
str(list(1, 2))
str(u(list(1, 2), "kg"))
u <- function(x, unit) {
attr(x, "unit") <- unit
structure(x, class = c(class(x), "physical"))
}
str(u(list(1, 2), "kg"))
class(u(list(1, 2), "kg"))
u(data.frame(x1 = c(1, 2), x2 = c(3, 4), "kg"))
u(data.frame(x1 = c(1, 2), x2 = c(3, 4)), "kg")
zz <- u(data.frame(x1 = c(1, 2), x2 = c(3, 4)), "kg")
class(zz)
attr(zz)
attributes(zz)
inherits(x, "data.frame")
inherits(zz, "data.frame")
inherits(zz, "physical")
zz
zz
class(zz)
ud(zz)
un(zz)
zz <- un(zz)
zz
class(zz)
un <- function(x) {
attr(x, "unit") <- NULL
cl <- class(x)
unclass(x)
}
zz <- un(zz)
debug(un)
zz <- un(zz)
zz <- u(data.frame(x1 = c(1, 2), x2 = c(3, 4)), "kg")
zzd <- un(zz)
cl
which("physical", cl)
which(cl, "physical")
which(cl == "physical")
cl[which(cl == "physical")]
cl[!which(cl == "physical")]
cl[which(cl == "physical")]
which(cl == "physical")
seq_along(cl)
setdiff(seq_along(cl), which(cl == "physical"))
cl[setdiff(seq_along(cl), which(cl == "physical"))]
un <- function(x) {
attr(x, "unit") <- NULL
# unclass(x) - this is weird!!! destroys all classes
cl <- class(x)
class(x) <- cl[setdiff(seq_along(cl), which(cl == "physical"))]
}
zzd <- un(zz)
zzd
class(zzd)
debug(un)
zzd <- un(zz)
x
str(x)
class(x)
cl[setdiff(seq_along(cl), which(cl == "physical"))]
class(x) <- cl[setdiff(seq_along(cl), which(cl == "physical"))]
un <- function(x) {
attr(x, "unit") <- NULL
# unclass(x) - this is weird!!! destroys all classes
cl <- class(x)
class(x) <- cl[setdiff(seq_along(cl), which(cl == "physical"))]
return(x)
}
zzd <- un(zz)
zzd
class(zzd)
print(zz)
print(zzd)
print.physical <- function(x, ...) {
uattr <- attr(x, "unit")
attr(x, "unit") <- NULL
print(uattr)
print(un(x), ...)
#cat(uattr, ":", unclass(x))
}
print(zzd)
print(zz)
print.physical(zz)
print(un(x))
print(un(zz))
debug(print.physical)
print(un(zz))
print.physical(zz)
print.physical(zz)
print.physical <- function(x, ...) {
uattr <- attr(x, "unit")
attr(x, "unit") <- NULL
print(paste0("Units", uattr))
print(un(x), ...)
#cat(uattr, ":", unclass(x))
}
print.physical(zz)
print.physical <- function(x, ...) {
uattr <- attr(x, "unit")
attr(x, "unit") <- NULL
print(paste0("Units: ", uattr))
print(un(x), ...)
#cat(uattr, ":", unclass(x))
}
print.physical(zz)
print.physical(a)
debug(print.physical)
print.physical(a)
print.physical <- function(x, ...) {
uattr <- attr(x, "unit")
if (is.null(uattr)) {
uattr <- "N/A"
} else {
attr(x, "unit") <- NULL
}
print(paste0("Units: ", uattr))
print(un(x), ...)
#cat(uattr, ":", unclass(x))
}
debug(print.physical)
print.physical(a)
class(uattr)
class(uattr)
print.physical(zz)
print.physical(zz)
class(uattr)
unclass(uattr)
uattr
uattr[1]
print(paste0("Units: ", uattr))
print(paste0("Units: ", uattr[1]))
1
devtools::load_all(".")
uc(uc(u(list(1, 2), "ton"), "ton", "lb"), "lb", "ton")
uc(u(list(1, 2), "ton"), "ton", "lb")
u(list(1, 2), "ton")
debug(uc)
uc(u(list(1, 2), "ton"), "ton", "lb")
z
x
x
is.physical(x)
is.physical(x[[1]])
is.physical(x[[2]])
is.physical(x[1])
is.physical(x[2])
x
x[1]
x[2]
class(x)
devtools::load_all(".")
uc(u(list(1, 2), "ton"), "ton", "lb")
devtools::load_all(".")
uc(u(list(1, 2), "ton"), "ton", "lb")
Mass()
Length()
Area()
uc(Area()$const, "m", "ft")
uc(Area()$const, "m2", "in2")
uc(Area()$const, "in2", "m2")
z <- Area()$const
z
uc(z, "m2", "in2")
u(z, "m2")
uc(u(z, "m2"), "m2", "in2")
Area()
u(list(1, 2), "m2")
uc(u(list(1, 2), "m2"), "in2")
uc(u(list(1, 2), "m2"), "m2", "in2")
z <- Area()
z
uc(z$const, z$units, "in2")
z <- Pressure()
z
z[4]
z$units[4]
z$units[7]
z$units[8]
z$units[9]
z$units[10]
z$units[6]
z$const[6]
uc(z$const[6], "psi", "Pa")
uc(z$const, "psi", "Pa")
uc(150, "m", "km") + u(1:5, "km")
u(1:5, "km")
uc(150, "m", "km")
class(uc(150, "m", "km"))
class(u(1:5, "km"))
class(uc(u(150, "m"), "m", "km"))
uc(u(150, "m"), "m", "km") + u(1.0:5.0, "km")
uc(u(150, "m"), "m", "km") + u(c(1.0, 2.0, 3.0, 4.0, 5.0), "km")
uc(150, "m", "km") + u(c(1.0, 2.0, 3.0, 4.0, 5.0), "km")
uc(u(data.frame(x1 = 1:3, x2 = 4:6), "ft3"), "ft3", "cm3")
?switch
devtools::load_all(".")
uc(u(data.frame(x1 = 1:3, x2 = 4:6), "ft3"), "ft3", "cm3")
class(uc(u(data.frame(x1 = 1:3, x2 = 4:6), "ft3"), "ft3", "cm3"))
debug(uc)
class(uc(u(data.frame(x1 = 1:3, x2 = 4:6), "ft3"), "ft3", "cm3"))
from
to
x
class(x)
print.physical(x)
x
print(x)
sapply(x, `*`, m)
lapply(x, `*`, m)
class(sapply(x, `*`, m))
as.data.frame(sapply(x, `*`, m))
devtools::load_all(".")
uc(uc(u(list(1, 2), "ton"), "ton", "lb"), "lb", "ton")
u(list(1, 2), "ton")
uc(1, "mkm2", "D") - 1.013274)
uc(1, "mkm2", "D")
uc(1, "mkm2", "D") - 1.013274
uc(1, "mkm2", "D")
uc(1:2, "mkm2", "D")
debug(uc)
uc(1:2, "mkm2", "D")
class(z)
devtools::load_all(".")
uc(uc(u(list(1, 2), "ton"), "ton", "lb"), "lb", "ton")
u(list(1, 2), "ton")
uc(1, "mkm2", "D")
uc(uc(1, "ft3", "l"), "l", "cm3"), "cm3", "bbl")
uc(uc(uc(1, "ft3", "l"), "l", "cm3"), "cm3", "bbl")
uc(1, "ft3", "cm3")
uc(1, "bbl", "l")
devtools::document()
devtools::document()
library(data.table)
devtools::load_all(".")
kgm3_API(865)
devtools::load_all(".")
kgm3_API(865)
C_F(60)
x <- C_F(60)
x
class(x)
x <- data.frame(x1 = c(40, 50), x2 = c(70, 80))
C_F(X)
C_F(x)
class(C_F(x))
z <- C_F(x)
z
z1 <- u(1:5, "km")
print(z1)
print(z)
devtools::load_all(".")
print(z)
z <- C_F(x)
print(z)
uc(1, "mkm2", "D")
uc(1, "D", "mkm2")
uc(1, "ft3", "l")
uc(1, "ft3", "m3")
uc(1, "mkm2", "mD")
debug(uc)
uc(1, "mkm2", "mD")
Area()
phys
phys()
phys()$const[j]
phys()$const[i]
phys()
measurelist()
x <- Area()
uc(1, "mkm2", "mD")
sapply(X = lf, FUN = function(f) is.null(f)
)
sapply(X = lf, FUN = function(f) is.null(f))
sapply(X = lf, FUN = is.null)
devtools::load_all(".")
uc(1, "mkm2", "mD")
debug(uc)
uc(1, "mkm2", "mD")
measurelist()
measurelist()$units
sapply(measurelist(), function(f) f()$units)
from %in% sapply(measurelist(), function(f) f()$units)
?`%in%`
sapply(sapply(measurelist(), function(f) f()$units), `%in%`, x = from)
z <- sapply(X = measurelist(), FUN = function(f) f()$units)
from %in% z
from %in% unlist(z)
devtools::load_all(".")
debug(uc)
uc(1, "mkm2", "mD")
which(sapply(listunits, `%in%`, x = from))
measurelist()[which(sapply(listunits, `%in%`, x = from))]
devtools::load_all(".")
uc(1, "mkm2", "mD")
debug(uc)
uc(1, "mkm2", "mD")
uc(1, "mkm2", "mD")
measurelist()[which(sapply(listunits, `%in%`, x = from))]
measurelist()[which(sapply(listunits, `%in%`, x = from))][[1]]
measurelist()[which(sapply(listunits, `%in%`, x = from))][[1]]()
devtools::load_all(".")
uc(1, "mkm2", "mD")
uc(1, "m2", "acre")
uc(1, "acre", "ft2")
devtools::load_all(".")
uc(1, "acre", "ft2")
uc(1, "acre", "m2")
devtools::load_all(".")
uc(1, "acre", "m2")
uc(1, "acre", "ft2")
mD_m2
1/(mD_m2*1e-3)
1/mD_m2
uc(1, "mD", "m2")
uc(1, "D", "m2")
uc(1, "mkm2", "m2")
uc(1, "mkm2", "mD")
uc(1, "mD", "mkm2")
1/mD_m2
uc(1, "D", "mkm2")
uc(1, "mkm2", "D")
uc(1, "mkm2", "mD")
1/mD_m2
mD_m2
devtools::load_all(".")
mD_m2
uc(1, "m2", "mD")
1/mD_m2
debug(uc)
uc(1, "m2", "mD")
phys$const[j]
phys$const[i]
mD_m2
devtools::load_all(".")
uc(1, "m2", "mD")
uc(1, "m2", "mkm2")
devtools::load_all(".")
uc(1, "m2", "mkm2")
uc(1, "m2", "mD")
uc(1, "m2", "nD")
uc(1, "mD", "mkD")
uc(1, "mD", "nD")
uc(1, "mkm2", "D")
uc(1, "mkm2", "mD")
uc(1, "mkm2", "D")
uc(1, "mkm2", "m2")
uc(1, "mkm2", "mD")
1e3/mD_m2
devtools::load_all(".")
1e-3/mD_m2
uc(1, "mkm2", "mD")
uc(1, "mkm2", "D")
uc(1, "mkm2", "mkD")
devtools::load_all(".")
uc(1, "mkm2", "mkD")
uc(1, "mkm2", "mD")
uc(1, "mkm2", "mD") * 1e6
uc(1, "mD", "mkD")
devtools::load_all(".")
uc(1, "mD", "mkD")
uc(1, "mkm2", "D")
uc(1, "mkm2", "mD")
1/101325
1/101325 * 1e-9
devtools::load_all(".")
mD_m2
devtools::load_all(".")
mD_m2
unitconv::u(1, "m3")
unitconv::u(1, "kg/m3")
uc(1, "kg/m3", "lbft3")
unitconv::uc(1, "kg/m3", "lbft3")
z1 <- unitconv::u(1, "kg/m3")
z1
attr(z1)
attributes(z1)
attributes(z1)$unit
rm(z1)
datasets::airmiles
datasets::pressure
?datasets::pressure
u(datasets::pressure, c("deg.C", "mmHg"))
unitconv::u(datasets::pressure, c("deg.C", "mmHg"))
z1 <- unitconv::u(datasets::pressure, c("deg.C", "mmHg"))
View(z1)
class(z1)
head(z1)
attributes(z1)
z2 <- unitconv::un(z1)
z2
head(z2)
?NextMethod
?UseMethod
?callNextMethod
library(unitconv)
methods("physical")
methods("print")
print.physical
unitconv::print.physical
unitconv::print
unitconv::is.physical()
unitconv::is.physical
baz <- function(x) UseMethod("baz", x)
baz.A <- function(x) "A"
baz.B <- function(x) "B"
ab <- structure(1, class = c("A", "B"))
ba <- structure(1, class = c("B", "A"))
baz
baz.A
baz.A()
baz(ab)
baz(bb)
baz(ba)
View(baz.B)
ab
ba
print(ba)
summary(z1)
?Math
detach("unitconv")
detach("package:unitconv", unload = TRUE)
devtools::load_all(".")
u(c(1, 2), c("m", "ft"))
z1 <- u(c(1, 2), c("m", "ft"))
z1
print(un(z1))
print(un(z2))
head(un(z1))
head(z1)
z1
head(z1)
head(z1)
head(z2)
z1 <- u(z2, c("deg.C", "mmHg"))
head(z2)
head(z1)
devtools::load_all(".")
head(z1)
devtools::load_all(".")
head(z1)
devtools::load_all(".")
head(z1)
paste(1:3, collapse = "\t")
paste(1:3, collapse = TRUE)
paste(1:3, collapse = "\n")
cat(paste(1:3, collapse = "\t"))
devtools::load_all(".")
head(z1)
z2 <- u(1:3, c("kg", "ft", "bbl"))
z2
head(z2)
?head
devtools::load_all(".")
head(z1)
head(z2)
z2
devtools::load_all(".")
z2
z1
z2
z1
devtools::load_all(".")
z1
z2
devtools::document()
devtools::load_all(".")
uc(1, "bar", "mmHg")
uc(u(1, "bar"), "mmHg")
uc(u(1, "bar"), to = "mmHg")
uc(u(1, "bar"), "mmHg")
uc(u(1, "bar"), to = "mmHg")
uc(1, "bar", "mmHg")
devtools::load_all(".")
uc(1, "bar", "mmHg")
uc(1, "bar", "mmHg")
devtools::load_all(".")
uc(1, "bar", "mmHg")
z3 <- uc(1, "bar", "mmHg")
z3
uc(z3, "Pa")
uc(z3, to = "Pa")
uc(z3, to = "MPa")
install.packages("gitignore")
